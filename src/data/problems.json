[
  {
    "name": "Loop-Pattern",
    "icon": "ðŸ“š",
    "description": "Master Loops Patterns",
    "problems": [
      {
        "id": 1,
        "title": "Square Pattern",
        "description": "Prints a square pattern of stars for a given size. The size is input by the user.\n\nExample:\nFor input `5`, the output will be:\n\n*****\n*****\n*****\n*****\n*****\n",
        "difficulty": "Easy",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < num; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 2,
        "title": "Rectangle Pattern",
        "description": "Prints a rectangle pattern of stars with given rows and columns. Both dimensions are input by the user.\n\nExample:\nFor input `3 5`, the output will be:\n\n*****\n*****\n*****\n",
        "difficulty": "Easy",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int rows, cols;\n    cin >> rows >> cols;\n    for (int i = 0; i < rows; i++)\n    {\n        for (int j = 0; j < cols; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(rows * cols)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },

      {
        "id": 4,
        "title": "Hollow Rectangle Pattern",
        "description": "Prints a hollow rectangle pattern of stars with given rows and columns. Both dimensions are input by the user.\n\nExample:\nFor input `4 5`, the output will be:\n\n*****\n*   *\n*   *\n*****\n",
        "difficulty": "Easy",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int row;\n    int col;\n    cin >> row;\n    cin >> col;\n    for (int i = 0; i < row; i++)\n    {\n        for (int j = 0; j < col; j++)\n        {\n            if (i == 0 || i == row - 1)\n            {\n                cout << \"*\";\n            }\n            else\n            {\n                if (j == 0 || j == col - 1)\n                {\n                    cout << \"*\";\n                }\n                else\n                {\n                    cout << \" \";\n                }\n            }\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n * m)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 5,
        "title": "Half Pyramid Pattern",
        "description": "Prints a half pyramid pattern of stars for a given size. The size is input by the user.\n\nExample:\nFor input `5`, the output will be:\n\n*\n**\n***\n****\n*****\n",
        "difficulty": "Easy",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < i + 1; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 6,
        "title": "Inverted Half Pyramid Pattern",
        "description": "Prints an inverted half pyramid pattern of stars for a given size. The size is input by the user.\n\nExample:\nFor input `5`, the output will be:\n\n*****\n****\n***\n**\n*\n",
        "difficulty": "Easy",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < num - i; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 7,
        "title": "Numeric Half Pyramid Pattern",
        "description": "Prints a numeric half pyramid pattern for a given size. The size is input by the user.\n\nExample:\nFor input `5`, the output will be:\n\n1\n12\n123\n1234\n12345\n",
        "difficulty": "Easy",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < i + 1; j++)\n        {\n            cout << j + 1;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 8,
        "title": "Inverted Numeric Half Pyramid Pattern",
        "description": "Prints an inverted numeric half pyramid pattern for a given size. The size is input by the user.\n\nExample:\nFor input `5`, the output will be:\n\n12345\n1234\n123\n12\n1\n",
        "difficulty": "Easy",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < num - i; j++)\n        {\n            cout << j + 1;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 9,
        "title": "Hollow Inverted Half Pyramid Pattern",
        "description": "Prints a hollow inverted half pyramid pattern for a given size. The size is input by the user.\n\nExample:\nFor input `5`, the output will be:\n\n*****\n*  *\n* *\n**\n*\n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < num - i; j++)\n        {\n            if (i == 0 || i == num - 1)\n            {\n                cout << \"*\";\n            }\n            else\n            {\n                if (j == 0 || j == num - i - 1)\n                {\n                    cout << \"*\";\n                }\n                else\n                {\n                    cout << \" \";\n                }\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 10,
        "title": "Full Pyramid Pattern",
        "description": "Prints a full pyramid pattern of stars for a given size. The size is input by the user.\n\nExample:\nFor input `7`, the output will be:\n\n      * \n     * * \n    * * * \n   * * * * \n  * * * * * \n * * * * * * \n* * * * * * * \n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < num - i - 1; j++)\n        {\n            cout << \" \";\n        }\n        for (int j = 0; j < i + 1; j++)\n        {\n            cout << \"* \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 11,
        "title": "Inverted Full Pyramid Pattern",
        "description": "Prints an inverted full pyramid pattern of stars for a given size. The size is input by the user.\n\nExample:\nFor input `7`, the output will be:\n\n* * * * * * * \n * * * * * * \n  * * * * * \n   * * * * \n    * * * \n     * * \n      * \n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < i; j++)\n        {\n            cout << \" \";\n        }\n        for (int j = 0; j < num - i; j++)\n        {\n            cout << \"* \";\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 12,
        "title": "Diamond Pyramid Pattern",
        "description": "Prints a diamond-shaped pyramid pattern of stars for a given size. The size is input by the user.\n\nExample:\nFor input `5`, the output will be:\n\n    * \n   * * \n  * * * \n * * * * \n* * * * * \n* * * * * \n * * * * \n  * * * \n   * * \n    * \n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < num - i - 1; j++)\n        {\n            cout << \" \";\n        }\n        for (int j = 0; j < i + 1; j++)\n        {\n            cout << \"* \";\n        }\n        cout << endl;\n    }\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < i; j++)\n        {\n            cout << \" \";\n        }\n        for (int j = 0; j < num - i; j++)\n        {\n            cout << \"* \";\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 13,
        "title": "Hollow Pyramid Pattern",
        "description": "Prints a hollow pyramid pattern of stars for a given size. The size is input by the user.\n\nExample:\nFor input `5`, the output will be:\n\n     * \n    * * \n   *   * \n  *     * \n *       * \n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num=5;\n    // cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < num - i - 1; j++)\n        {\n            cout << \" \";\n        }\n        for (int j = 0; j < i + 1; j++)\n        {\n            if (j == 0 || j == i)\n            {\n                cout << \"* \";\n            }\n            else\n            {\n                cout << \"  \";\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 14,
        "title": "Inverted Hollow Pyramid Pattern",
        "description": "Prints an inverted hollow pyramid pattern of stars for a given size. The size is input by the user.\n\nExample:\nFor input `5`, the output will be:\n\n*       * \n *     * \n  *   * \n   * * \n    * \n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 5;\n    // cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < i; j++)\n        {\n            cout << \" \";\n        }\n        for (int j = 0; j < num - i; j++)\n        {\n            if (j == 0 || j == num - i - 1)\n            {\n                cout << \"* \";\n            }\n            else\n            {\n                cout << \"  \";\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 15,
        "title": "Hollow Diamond Pattern",
        "description": "Prints a hollow diamond pattern of stars for a given size. The size is input by the user.\n\nExample:\nFor input `5`, the output will be:\n\n    * \n   * * \n  *   * \n *     * \n*       * \n*       * \n *     * \n  *   * \n   * * \n    * \n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < num - i - 1; j++)\n        {\n            cout << \" \";\n        }\n        for (int j = 0; j < i + 1; j++)\n        {\n            if (j == 0 || j == i)\n            {\n                cout << \"* \";\n            }\n            else\n            {\n                cout << \"  \";\n            }\n        }\n        cout << endl;\n    }\n\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < i; j++)\n        {\n            cout << \" \";\n        }\n        for (int j = 0; j < num - i; j++)\n        {\n            if (j == 0 || j == num - i - 1)\n            {\n                cout << \"* \";\n            }\n            else\n            {\n                cout << \"  \";\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 16,
        "title": "Flipped Solid Diamond Pattern",
        "description": "Prints a flipped solid diamond pattern of stars for a given even size. The size is input by the user.\n\nExample:\nFor input `8`, the output will be:\n\n**** ****\n***   ***\n**     **\n*       *\n*       *\n**     **\n***   ***\n**** ****\n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 8;\n    int n = num / 2;\n    // cin >> num;\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n - i; j++)\n        {\n            cout << \"*\";\n        }\n        for (int j = 0; j < 2 * i + 1; j++)\n        {\n            cout << \" \";\n        }\n        for (int j = 0; j < n - i; j++)\n        {\n            cout << \"*\";\n        }\n\n        cout << endl;\n    }\n\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < i + 1; j++)\n        {\n            cout << \"*\";\n        }\n        for (int j = 0; j < (2 * n) - (2 * i + 1); j++)\n        {\n            cout << \" \";\n        }\n        for (int j = 0; j < i + 1; j++)\n        {\n            cout << \"*\";\n        }\n\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 17,
        "title": "Pyramidal Sequence Pattern",
        "description": "Prints a pyramidal sequence pattern where numbers are followed by asterisks in a specific sequence. The number increases in each row, and asterisks are placed between the numbers.\n\nExample:\nFor input `5`, the output will be:\n\n1\n2*2\n3*3*3\n4*4*4*4\n5*5*5*5*5\n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < 2 * i + 1; j++)\n        {\n            if (j % 2 == 1)\n            {\n                cout << \"*\";\n            }\n            else\n            {\n                cout << i + 1;\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": ""
      },
      {
        "id": 18,
        "title": "Full Pyramidal Sequence Pattern",
        "description": "Prints a full pyramidal sequence pattern with increasing and then decreasing rows. Each row contains numbers followed by asterisks in a specific sequence.\n\nExample:\nFor input `5`, the output will be:\n\n1\n2*2\n3*3*3\n4*4*4*4\n5*5*5*5*5\n4*4*4*4\n3*3*3\n2*2\n1\n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n\n    for (int i = 1; i <= num; ++i)\n    {\n        for (int j = 1; j <= i; ++j)\n        {\n            if (j > 1)\n            {\n                cout << \"*\";\n            }\n            cout << i;\n        }\n        cout << endl;\n    }\n\n    for (int i = num - 1; i >= 1; --i)\n    {\n        for (int j = 1; j <= i; ++j)\n        {\n            if (j > 1)\n            {\n                cout << \"*\";\n            }\n            cout << i;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This pattern first prints an increasing number sequence followed by asterisks, then decreases back."
      },
      {
        "id": 19,
        "title": "Character Sequence Pattern",
        "description": "Prints a sequence of characters forming a pattern. Each row starts with 'A' and continues incrementing, then mirrors back down to 'A'.\n\nExample:\nFor input `5`, the output will be:\n\nA\nABA\nABCBA\nABCDCBA\nABCDEDCBA\n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 5;\n    // cin >> num;\n    for (int row = 0; row < num; row++)\n    {\n        char ch;\n        for (int col = 0; col < row + 1; col++)\n        {\n            ch = col + 1 + 'A' - 1;\n            cout << ch;\n        }\n        for (char alphabet = ch; alphabet > 'A';)\n        {\n            alphabet = alphabet - 1;\n            cout << alphabet;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This pattern creates a character sequence that first increments and then decrements symmetrically for each row."
      },
      {
        "id": 20,
        "title": "Numeric Hollow Half Pyramid",
        "description": "Prints a numeric hollow half pyramid where the first and last elements of each row are numbers, and the spaces in between are hollow. The last row is fully filled.\n\nExample:\nFor input `5`, the output will be:\n\n1\n12\n1 3\n1  4\n12345\n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 5;\n    // cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j <= i; j++)\n        {\n            if (j == 0 || j == i || i == num - 1)\n            {\n                cout << j + 1;\n            }\n            else\n            {\n                cout << \" \";\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This pattern creates a hollow numeric pyramid where only the edges of each row are filled with numbers, and spaces appear in the middle for all rows except the last."
      },
      {
        "id": 21,
        "title": "Numeric Hollow Inverted Half Pyramid",
        "description": "Prints a numeric hollow inverted half pyramid where the first and last elements of each row are numbers, and the spaces in between are hollow. The first row is fully filled, and subsequent rows have hollow spaces between the first and last number.\n\nExample:\nFor input `5`, the output will be:\n\n12345\n2  5\n3 5\n45\n5\n",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 5;\n    // cin >> num;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = i + 1; j <= num; j++)\n        {\n            if (j == i + 1 || j == num || i == 0)\n            {\n                cout << j;\n            }\n            else\n            {\n                cout << \" \";\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This pattern creates a hollow inverted numeric pyramid, where only the edges of each row are filled with numbers, and spaces appear between the edges for all rows except the first."
      },
      {
        "id": 22,
        "title": "Numeric Palindrome Equilateral Pyramid",
        "description": "Prints a numeric palindrome equilateral pyramid pattern where each row contains numbers that form a palindrome, and the numbers increase from 1 up to the row number and then decrease back to 1.\n\nExample:\nFor input `5`, the output will be:\n\n    1\n   121\n  12321\n 1234321\n123454321",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    int k = num;\n    for (int i = 0; i < num; i++)\n    {\n        int c = 1;\n        for (int j = 0; j < k; j++)\n        {\n            if (j < num - i - 1)\n            {\n                cout << \" \";\n            }\n            else if (j <= num - 1)\n            {\n                cout << c;\n                c++;\n            }\n            else if (j == num)\n            {\n                c = c - 2;\n                cout << c;\n                c--;\n            }\n            else\n            {\n                cout << c;\n                c--;\n            }\n        }\n        k++;\n        cout << endl;\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This pattern creates a numeric palindrome pyramid, where each row consists of numbers that increase and then decrease symmetrically, forming a palindrome structure. The number of characters in each row increases as you move down the pyramid."
      },
      {
        "id": 23,
        "title": "Solid Half Diamond",
        "description": "Prints a solid half diamond pattern where the top half contains increasing stars and the bottom half contains decreasing stars.\n\nExample:\nFor input `5`, the output will be:\n\n*\n**\n***\n****\n*****\n****\n***\n**\n*",
        "difficulty": "Easy",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 5;\n    for (int i = 0; i < 2 * num - 1; i++)\n    {\n        int cond = 0;\n        if (i < num)\n        {\n            cond = i;\n        }\n        else\n        {\n            cond = num - (i % num) - 2;\n        }\n        for (int j = 0; j <= cond; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This pattern consists of two parts: an upper half with increasing stars and a lower half with decreasing stars. The total number of rows is `2 * num - 1`."
      },
      {
        "id": 24,
        "title": "Floydâ€™s Triangle Pattern",
        "description": "Prints Floyd's triangle, where each row contains consecutive integers starting from 1.\n\nExample:\nFor input `5`, the output will be:\n\n1\n2 3\n4 5 6\n7 8 9 10",
        "difficulty": "Easy",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 5;\n    int c=1;\n    for (int i = 0; i < num; i++)\n    {\n        for (int j = 0; j < i; j++)\n        {\n            cout<<c<<\" \";\n            c++;\n        }\n        cout<<endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "Floyd's triangle is formed by filling consecutive integers row by row. The number of elements in each row increases as we move to the next row."
      },
      {
        "id": 25,
        "title": "Pascalâ€™s Triangle Pattern",
        "description": "Prints Pascal's Triangle, where each number is the binomial coefficient. Each row of Pascalâ€™s Triangle represents the coefficients of the binomial expansion.\n\nExample:\nFor input `5`, the output will be:\n\n1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 5;\n    for (int i = 0; i < num; i++)\n    {\n        int c = 1;\n        for (int j = 0; j <= i; j++)\n        {\n            cout << c << \" \";\n            c = c * (i - j) / (j + 1);\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "Each row of Pascalâ€™s Triangle corresponds to the coefficients in the binomial expansion, and the numbers are calculated using the formula C(n, k) = n! / (k!(n - k)!)"
      },
      {
        "id": 26,
        "title": "Butterfly Pattern",
        "description": "Prints a butterfly pattern, where the left and right halves are symmetric. The pattern consists of stars ('*') and spaces arranged in a way that they create a butterfly shape when viewed together.\n\nExample:\nFor input `5`, the output will be:\n\n*        *\n**      **\n***    ***\n****  ****\n**********\n**********\n****  ****\n***    ***\n**      **\n*        *",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int n = 5;\n    for (int i = 0; i < 2 * n; i++)\n    {\n        int cond = i < n ? i : n + (n - i - 1);\n        int space_count = i < n ? 2 * (n - cond - 1) : i - cond - 1;\n        for (int j = 0; j < 2 * n; j++)\n        {\n            if (j <= cond)\n            {\n                cout << \"*\";\n            }\n            else if (space_count > 0)\n            {\n                cout << \" \";\n                space_count--;\n            }\n            else\n            {\n                cout << \"*\";\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This pattern is symmetrical, with stars placed at certain positions on each row and spaces filling the rest of the positions. The number of spaces decreases as we approach the center of the pattern."
      },
      {
        "id": 27,
        "title": "Fancy Pattern #1",
        "description": "Prints a fancy pyramid-like pattern with numbers that ascend and then descend on each row, creating a symmetric pattern.\n\nExample:\nFor input `7`, the output will be:\n\n1\n121\n12321\n1234321\n12321\n121\n1",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int n = 7;\n    for (int i = 0; i < n; i++)\n    {\n        int cond = i < n / 2 ? 2 * i : 2 * (n - i - 1);\n        for (int j = 0; j <= cond; j++)\n        {\n            if (j <= cond / 2)\n            {\n                cout << j + 1;\n            }\n            else\n            {\n                cout << cond - j + 1;\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This pattern uses a combination of increasing and decreasing numbers for each row, with the number of elements in each row decreasing as you approach the center."
      },
      {
        "id": 28,
        "title": "Fancy Pattern #2",
        "description": "Prints a pattern of increasing numbers separated by stars, and then a symmetric pattern with numbers descending.\n\nExample:\nFor input `4`, the output will be:\n\n1\n2*3\n4*5*6\n7*8*9*10\n7*8*9*10\n4*5*6\n2*3\n1",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int n = 4;\n    int c = 1;\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j <= i; j++)\n        {\n            cout << c;\n            c++;\n            if (j < i)\n            {\n                cout << \"*\";\n            }\n        }\n        cout << endl;\n    }\n    int start = c - n;\n    for (int i = 0; i < n; i++)\n    {\n        int k = start;\n        for (int j = 0; j <= n - i - 1; j++)\n        {\n            cout << k;\n            k++;\n            if (j < n - i - 1)\n            {\n                cout << \"*\";\n            }\n        }\n        start = start - (n - i - 1);\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This pattern uses a combination of numbers and stars, creating a mirrored effect as you go down and up."
      },
      {
        "id": 29,
        "title": "Fancy Pattern #3",
        "description": "Prints a pattern with stars and numbers. Each row contains a number repeated multiple times, separated by stars, and the numbers gradually increase with each row.\n\nExample:\nFor input `9`, the output will be:\n\n********1*********\n*******2*2********\n******3*3*3*******\n*****4*4*4*4******\n****5*5*5*5*5*****\n***6*6*6*6*6*6****\n**7*7*7*7*7*7*7***\n*8*8*8*8*8*8*8*8**\n9*9*9*9*9*9*9*9*9*",
        "difficulty": "Medium",
        "category": "loop-pattern",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\n#include \"assert.h\"\nusing namespace std;\n\nint main()\n{\n    int n = 9;\n    assert(n <= 9);\n    for (int i = 0; i < n; i++)\n    {\n        int start_num_index = 8 - i;\n        int num = i + 1;\n        int count_num = num;\n        for (int j = 0; j <= 17; j++)\n        {\n            if (j == start_num_index && count_num > 0)\n            {\n                cout << num;\n                start_num_index += 2;\n                count_num--;\n            }\n            else\n            {\n                cout << \"*\";\n            }\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This pattern uses a fixed width of 18 characters per row with alternating stars and numbers. The pattern is symmetrical and the number of repetitions increases with each row."
      }
    ]
  },
  {
    "name": "Functions",
    "icon": "ðŸ“š",
    "description": "Master Functions",
    "problems": [
      {
        "id": 1,
        "title": "Find Max of 3 Numbers",
        "description": "Finds the maximum of three given numbers by using the `max` function. The numbers are input as arguments to a function `printMaximum` which outputs the highest value.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nvoid printMaximum(int n1, int n2, int n3)\n{\n    int ans1 = max(n1, n2);\n    int finalAns = max(ans1, n3);\n    cout << \"final Ans is: \" << finalAns << endl;\n}\n\nint main()\n{\n    printMaximum(3, 30, 100);\n    return 0;\n}"
        },
        "timeComplexity": "O(1)",
        "spaceComplexity": "O(1)",
        "notes": "This function utilizes the built-in `max` function to compare numbers and find the maximum."
      },
      {
        "id": 2,
        "title": "Counting from 1 to N",
        "description": "Prints the numbers from 1 to a given number `n`. The function `printCounting` takes `n` as an argument and prints each number from 1 to `n` on a new line.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nvoid printCounting(int n)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        cout << i << endl;\n    }\n}\n\nint main()\n{\n    printCounting(10);\n    return 0;\n}"
        },
        "timeComplexity": "O(n)",
        "spaceComplexity": "O(1)",
        "notes": "The function uses a loop to print numbers from 1 to `n`."
      },
      {
        "id": 3,
        "title": "Check Prime or Not",
        "description": "Checks whether a given number `n` is prime or not. The function `checkPrime` loops through numbers from 2 to `n-1` and checks if `n` is divisible by any number. If so, it returns false; otherwise, it returns true.",
        "difficulty": "Medium",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nbool checkPrime(int n)\n{\n    for (int i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main()\n{\n    bool prime = checkPrime(10);\n    if (prime)\n    {\n        cout << \"its a prime number\" << endl;\n    }\n    else\n    {\n        cout << \"its not a prime number\" << endl;\n    }\n    return 0;\n}"
        },
        "timeComplexity": "O(n)",
        "spaceComplexity": "O(1)",
        "notes": "This function checks primality by testing divisibility with all integers less than `n`."
      },
      {
        "id": 4,
        "title": "Check Even or Odd",
        "description": "Checks whether a given number `num` is even or odd. The function `checkEvenOdd` uses the modulus operator to determine if the number is divisible by 2. If it is, the number is even; otherwise, it is odd.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nvoid checkEvenOdd(int num)\n{\n    if (num % 2 == 0)\n    {\n        cout << \"Even Number\" << endl;\n    }\n    else\n    {\n        cout << \"Odd Number\" << endl;\n    }\n}\n\nint main()\n{\n    checkEvenOdd(110);\n    return 0;\n}"
        },
        "timeComplexity": "O(1)",
        "spaceComplexity": "O(1)",
        "notes": "This function determines whether the number is even or odd by using the modulus operator."
      },
      {
        "id": 5,
        "title": "Check Even or Odd using Bitwise Operator",
        "description": "Checks whether a given number `num` is even or odd using the bitwise AND operator. If the least significant bit of the number is 0, the number is even; otherwise, it is odd.",
        "difficulty": "Medium",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nvoid checkEvenOdd(int num)\n{\n    if ((num & 1) == 0)\n    {\n        cout << \"Even Number\" << endl;\n    }\n    else\n    {\n        cout << \"Odd Number\" << endl;\n    }\n}\n\nint main()\n{\n    checkEvenOdd(110);\n    return 0;\n}"
        },
        "timeComplexity": "O(1)",
        "spaceComplexity": "O(1)",
        "notes": "This function uses a bitwise AND operation to check if the least significant bit of the number is 0 (even) or 1 (odd)."
      },
      {
        "id": 6,
        "title": "Sum of all numbers up to 1 to N",
        "description": "Calculates the sum of all numbers from 1 to a given number `n`. The function `findSumUptoN` iterates through all integers from 1 to `n`, adding them together to find the total sum.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nvoid findSumUptoN(int n)\n{\n    int sum = 0;\n\n    for (int i = 1; i <= n; i++)\n    {\n        sum = sum + i;\n    }\n\n    cout << \"Final Sum: \" << sum << endl;\n}\n\nint main()\n{\n    findSumUptoN(110);\n    return 0;\n}"
        },
        "timeComplexity": "O(n)",
        "spaceComplexity": "O(1)",
        "notes": "The function calculates the sum of all integers from 1 to `n` by iterating through each number and adding it to the running total."
      },
      {
        "id": 7,
        "title": "Sum of all even numbers up to 1 to N",
        "description": "Calculates the sum of all even numbers from 1 to a given number `n`. The function `findSumEvenUptoN` iterates through all numbers from 1 to `n`, checks if the number is even, and adds it to the total sum.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nvoid findSumEvenUptoN(int n)\n{\n    int sum = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            sum = sum + i;\n        }\n    }\n    cout << \"Final Sum: \" << sum << endl;\n}\n\nint main()\n{\n    findSumEvenUptoN(10);\n    return 0;\n}"
        },
        "timeComplexity": "O(n)",
        "spaceComplexity": "O(1)",
        "notes": "The function calculates the sum of all even numbers from 1 to `n` by checking if each number is divisible by 2."
      },
      {
        "id": 8,
        "title": "Function to find area of a circle",
        "description": "Calculates the area of a circle for a given radius. The function `circleArea` takes the radius as an argument and returns the calculated area using the formula `Ï€ * radius^2`.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nfloat circleArea(float radius)\n{\n    float area = 3.14 * radius * radius;\n    return area;\n}\n\nint main()\n{\n    float radius;\n    cin >> radius;\n    float area = circleArea(radius);\n    cout << \"Area: \" << area << endl;\n    return 0;\n}"
        },
        "timeComplexity": "O(1)",
        "spaceComplexity": "O(1)",
        "notes": "The function calculates the area of a circle based on the formula `Ï€ * radius^2`, with an approximation of `Ï€` as 3.14."
      },
      {
        "id": 9,
        "title": "Function to find Factorial of a Number",
        "description": "Calculates the factorial of a given number `n`. The function `factorial` uses a loop to multiply all integers from 1 to `n` to calculate the factorial.",
        "difficulty": "Medium",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nlong long int factorial(long long int n)\n{\n    long long int fact = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    return fact;\n}\n\nint main()\n{\n    long long int n;\n    cin >> n;\n    long long int ans = factorial(n);\n    cout << \"Factorial of \" << n << \" is: \" << ans << endl;\n    return 0;\n}"
        },
        "timeComplexity": "O(n)",
        "spaceComplexity": "O(1)",
        "notes": "This function calculates the factorial of a number using an iterative approach."
      },
      {
        "id": 10,
        "title": "Print all prime numbers from 1 to N",
        "description": "Prints all prime numbers from 1 to a given number `n`. The function `checkPrime` checks if a number is prime, and in the `main` function, it iterates through all numbers from 2 to `n`, printing the primes.",
        "difficulty": "Medium",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nbool checkPrime(int n)\n{\n    for (int i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main()\n{\n    int n;\n    cin >> n;\n    for (int i = 2; i < n; i++)\n    {\n        bool isPrime = checkPrime(i);\n        if (isPrime)\n        {\n            cout << i << \" \";\n        }\n    }\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n^2)",
        "spaceComplexity": "O(1)",
        "notes": "This function prints all prime numbers from 1 to `n` by checking each number from 2 to `n` to see if it is prime."
      },
      {
        "id": 11,
        "title": "Leetcode 7 â†’ Reverse Integer",
        "description": "Given a 32-bit signed integer `x`, the task is to reverse the digits of the integer. If reversing the integer causes it to overflow, return 0. The function handles both positive and negative integers and ensures no overflow occurs during the reversal process.",
        "difficulty": "Medium",
        "category": "functions",
        "source": "Leetcode",
        "solved": true,
        "solutions": {
          "cpp": "class Solution\n{\npublic:\n    int reverse(int x)\n    {\n        int ans = 0;\n        int rem = 0;\n\n        bool isNegative = false;\n\n        if (x <= INT_MIN)\n        {\n            return 0;\n        }\n\n        if (x < 0)\n        {\n            isNegative = true;\n            x = -x;\n        }\n\n        while (x > 0)\n        {\n            if (ans > INT_MAX / 10)\n            {\n                return 0;\n            }\n\n            int digit = x % 10;\n            ans = ans * 10 + digit;\n            x = x / 10;\n        }\n        return isNegative ? -ans : ans;\n    }\n};"
        },
        "timeComplexity": "O(log x)",
        "spaceComplexity": "O(1)",
        "notes": "The solution handles overflow scenarios and checks if the reversed integer will fit within the 32-bit signed integer range."
      },
      {
        "id": 12,
        "title": "Set Kth Bit",
        "description": "Given a number `N` and a position `K`, the task is to set the K-th bit of the number `N` to 1. The function uses bitwise operations to achieve this.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "GeeksforGeeks",
        "solved": true,
        "solutions": {
          "cpp": "class Solution\n{\npublic:\n    int setKthBit(int N, int K)\n    {\n        int mask = 1 << K;\n        int ans = N | mask;\n        return ans;\n    }\n};"
        },
        "timeComplexity": "O(1)",
        "spaceComplexity": "O(1)",
        "notes": "The solution uses a left shift operation to create a mask with the K-th bit set to 1 and then performs a bitwise OR with `N` to set the K-th bit."
      },
      {
        "id": 13,
        "title": "Leetcode 2469 â†’ Convert the temperature",
        "description": "Given a temperature in Celsius, the task is to convert it into both Kelvin and Fahrenheit. The function returns a vector containing the converted temperature values in the order [Kelvin, Fahrenheit].",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Leetcode",
        "solved": true,
        "solutions": {
          "cpp": "class Solution\n{\npublic:\n    vector<double> convertTemperature(double celsius)\n    {\n        double Kelvin = celsius + 273.15;\n        double Fahrenheit = celsius * 1.80 + 32.00;\n\n        vector<double> ans;\n        ans.push_back(Kelvin);\n        ans.push_back(Fahrenheit);\n        return ans;\n    }\n};"
        },
        "timeComplexity": "O(1)",
        "spaceComplexity": "O(1)",
        "notes": "The solution directly applies the formulas for converting Celsius to Kelvin and Fahrenheit. The result is returned as a vector."
      },
      {
        "id": 14,
        "title": "Count all set bits of a number",
        "description": "Given a number `n`, the task is to count the number of set bits (1s) in the binary representation of `n`. The function iterates through the bits of the number to count how many bits are set to 1.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint countSetBit(int n)\n{\n    int count = 0;\n    while (n > 0)\n    {\n        int bit = n % 2;\n        if (bit == 1)\n        {\n            count++;\n        }\n        n = n / 2;\n    }\n    return count;\n}\n\nint main()\n{\n    int n;\n    cin >> n;\n    int setBitCount = countSetBit(n);\n    return 0;\n}"
        },
        "timeComplexity": "O(log n)",
        "spaceComplexity": "O(1)",
        "notes": "The function counts the number of set bits in the binary representation of the number by repeatedly dividing the number by 2 and checking the remainder."
      },
      {
        "id": 15,
        "title": "Count all set bits of a number using Bitwise Operator",
        "description": "Given a number `n`, the task is to count the number of set bits (1s) in the binary representation of `n` using bitwise operators. The function uses the bitwise AND operator to check each bit and the bitwise right shift operator to move through the bits.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint countSetBit(int n)\n{\n    int count = 0;\n    while (n)\n    {\n        int bit = (n & 1);\n        if (bit)\n        {\n            count++;\n        }\n        n = n >> 1;\n    }\n    return count;\n}\n\nint main()\n{\n    int n;\n    cin >> n;\n    int setBitCount = countSetBit(n);\n    return 0;\n}"
        },
        "timeComplexity": "O(log n)",
        "spaceComplexity": "O(1)",
        "notes": "The function uses the bitwise AND operator to check if the current bit is set and the bitwise right shift operator to shift to the next bit."
      },
      {
        "id": 16,
        "title": "Create a number using digits",
        "description": "Given a number `numberOfDigits`, the task is to create a number by taking individual digits as input from the user. The function combines the digits into a single number and returns it.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint createNumberUsingDigits(int numberOfDigits)\n{\n    int num = 0;\n    for (int i = 0; i < numberOfDigits; i++)\n    {\n        cout << \"Enter Digits: \" << endl;\n        int digits;\n        cin >> digits;\n        num = num * 10 + digits;\n    }\n    return num;\n}\n\nint main()\n{\n    int numberOfDigits;\n    cin >> numberOfDigits;\n    int num = createNumberUsingDigits(numberOfDigits);\n    cout << num << endl;\n\n    return 0;\n}"
        },
        "timeComplexity": "O(n)",
        "spaceComplexity": "O(1)",
        "notes": "The function iterates over the number of digits and appends each digit to the current number by multiplying the previous number by 10 and adding the new digit."
      },
      {
        "id": 17,
        "title": "Print all digits of an integer",
        "description": "Given an integer `n`, the task is to print each digit of the number starting from the least significant digit (ones place) to the most significant digit.",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint printAllDigits(int n)\n{\n    while (n)\n    {\n        int onesPlaceDigit = n % 10;\n        cout << \"Digits: \" << onesPlaceDigit << endl;\n        n /= 10;\n    }\n}\n\nint main()\n{\n    int n;\n    cout << \"Enter Number to see its Digits\" << endl;\n    cin >> n;\n    printAllDigits(n);\n\n    return 0;\n}"
        },
        "timeComplexity": "O(d)",
        "spaceComplexity": "O(1)",
        "notes": "The function iterates over the digits of the number by continuously dividing the number by 10, and prints each digit starting from the least significant."
      },
      {
        "id": 18,
        "title": "Convert KM into miles",
        "description": "Given a distance in kilometers, the task is to convert the value into miles using the conversion factor (1 km = 0.621371 miles).",
        "difficulty": "Easy",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nint KMtoMiles(int km)\n{\n    float _1kmMile = 0.621371;\n    float miles = km * _1kmMile;\n    return miles;\n}\n\nint main()\n{\n    float km;\n    cout << \"Tell me KM: \" << endl;\n    cin >> km;\n    float miles = KMtoMiles(km);\n    cout << \"Miles=\" << miles << endl;\n    return 0;\n}"
        },
        "timeComplexity": "O(1)",
        "spaceComplexity": "O(1)",
        "notes": "The function converts kilometers into miles using the standard conversion factor of 0.621371."
      },
      {
        "id": 19,
        "title": "Print binary representation of a decimal number",
        "description": "Given a decimal number, the task is to print its binary representation. The binary representation of a number is the sequence of binary digits (0 and 1) that represents the value in base-2.",
        "difficulty": "Medium",
        "category": "functions",
        "source": "Practice",
        "solved": true,
        "solutions": {
          "cpp": "#include <iostream>\nusing namespace std;\n\nvoid BinaryRepresent(int value) {\n    string ans = \"\";\n    while (value > 0) {\n        int digit = value % 2;\n        ans = to_string(digit) + ans;\n        value /= 2;\n    }\n    cout << ans << endl;\n}\n\nint main() {\n    BinaryRepresent(10);\n    return 0;\n}"
        },
        "timeComplexity": "O(log n)",
        "spaceComplexity": "O(log n)",
        "notes": "The function iteratively divides the number by 2 to extract binary digits and constructs the binary string from least significant to most significant bit."
      }
    ]
  }
]
